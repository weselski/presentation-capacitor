{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { CapacitorPresentationPlugin, OpenOptions, OpenResponse } from './definitions';\n\nexport class CapacitorPresentationWeb extends WebPlugin implements CapacitorPresentationPlugin {\n\n  private presentationConnection: any;\n\n  async open(options: OpenOptions): Promise<OpenResponse> {\n    try {\n      let data = null;\n      switch (options.type) {\n        case 'url':\n          data = options.url;\n          break;\n        case 'html':\n          data = options.html;\n          break;\n        case 'video':\n          data = options.videoOptions?.videoUrl;\n      }\n\n      if (!data) {\n        throw new Error('Please enter all required values!');\n      }\n      const start = await this.startDisplay(data);\n      this.notifyListeners('onSuccessLoadUrl', start);\n      return {\n        success: start,\n      };\n    } catch (error) {\n      console.log(error);\n      this.notifyListeners('onFailLoadUrl', error);\n      return {\n        error: error,\n        result: options\n      };\n    }\n  }\n\n  async sendMessage<T>(message: T): Promise<any> {\n    this.notifyListeners('onMessage', message);\n    this.presentationConnection?.send(JSON.stringify(message));\n    return message\n  }\n\n  private async startDisplay(data: string) {\n    const presentationRequest = new (window as any).PresentationRequest([data]);\n    return new Promise<any>(async (resolve) => {\n      presentationRequest.addEventListener('connectionavailable', (event: any) => {\n        this.presentationConnection = event.connection;\n        resolve(this.presentationConnection);\n        this.presentationConnection.addEventListener('close', () => {\n          console.log('> Connection closed.');\n        });\n        this.presentationConnection.addEventListener('terminate', () => {\n          console.log('> Connection terminated.');\n        });\n        this.presentationConnection.addEventListener('message', (event: any) => {\n          console.log('> ' + event.data);\n        }); \n      });    \n      await presentationRequest.start();\n      resolve(data);\n    })\n  }\n\n  async terminate() {\n    console.log(this.presentationConnection);\n    return this.presentationConnection?.terminate();\n  }\n\n  async getDisplays(): Promise<{ displays: number }> {\n    const presentationRequest = new (window as any).PresentationRequest(['']);\n\n    try {\n      await presentationRequest.getAvailability();\n      return {\n        displays: 1,\n      };\n    } catch (error) {\n      return {\n        displays: 0,\n      };\n    }\n  }\n}\n"]}